-- Stored Procedure:
-- Create a stored procedure that takes a customer ID as input and returns details of their transactions, including product details, total cost, and payment information.
DELIMITER //
CREATE PROCEDURE CustomerTransactions(IN CustomerName VARCHAR(255))
BEGIN
    SELECT Total_Cost
    FROM retail_transactions_dataset
    WHERE Customer_Name = CustomerName;
END //
DELIMITER ;

CALL CustomerTransactions('Cheyenne Newman');


-- Common Table Expressions (CTE):
-- Use a Common Table Expression to calculate the average transaction value for each store type.
WITH StoreTypeAverage AS (
	SELECT Store_Type,AVG(Total_Cost) as Avg_TransactionVlaue
    FROM retail_transactions_dataset
    GROUP BY Store_Type
    ORDER BY AVG(Total_Cost) DESC
)
SELECT * FROM StoreTypeAverage;

-- Time-based Insights:
-- Calculate the monthly and yearly total revenue from transactions.
SELECT YEAR(Date) AS YEAR,ROUND(SUM(Total_Cost)) as YEAR_REVENUE
FROM retail_transactions_dataset
GROUP BY YEAR(Date)
ORDER BY YEAR(Date) DESC; 

SELECT MONTH(Date) AS MONTH,TRUNCATE(SUM(Total_Cost),2) as MONTH_REVENUE
FROM retail_transactions_dataset
GROUP BY MONTH(Date)
ORDER BY MONTH(Date); 

-- Window Functions:
-- Use window functions to rank customers based on their total spending.
SELECT
	Customer_Name,
    Total_Cost,
    RANK() OVER (ORDER BY Total_Cost) AS SpendingRank
FROM retail_transactions_dataset;

-- Customer_Category
SELECT
	Customer_Category,
    Total_Cost,
    RANK() OVER (ORDER BY Total_Cost) AS SpendingRank
FROM retail_transactions_dataset;

-- Customer Segmentation:
-- Apply clustering or grouping to segment customers based on their transaction behavior.
SELECT 
    Customer_Name,
    AVG(Total_Cost) AS average_expenditure,
    CASE
        WHEN AVG(Total_Cost) > 70 THEN 'High Value'
        WHEN AVG(Total_Cost) > 50 THEN 'Medium Value'
        ELSE 'Low Value'
    END AS Customer_Segmentation
FROM
    retail_transactions_dataset
GROUP BY Customer_Name;

-- Discount Effectiveness:
-- Analyze the effectiveness of discounts by comparing the average transaction value with and without discounts.
SELECT
    Discount_Applied,
    AVG(Total_Cost) AS AvgTransactionValue
FROM retail_transactions_dataset
GROUP BY Discount_Applied;

-- Product Popularity:
-- Identify the most popular products by counting the number of times each product appears in transactions.
SELECT Product, COUNT(Product) as no_of_products
FROM retail_transactions_dataset
GROUP by Product
ORDER by COUNT(Product) DESC;

-- Payment Method Analysis:
-- Analyze the distribution of payment methods used by customers.
SELECT 
	Payment_Method,
    COUNT(*) as TotalTransactions
FROM retail_transactions_dataset
GROUP BY Payment_Method;

-- Location-based Insights:
-- Determine the total revenue generated by each city or store type.
SELECT City,
SUM(Total_Cost) as Total_revenue
FROM retail_transactions_dataset
GROUP BY City
ORDER BY SUM(Total_Cost) DESC;

SELECT Store_Type,
SUM(Total_Cost) as Total_revenue
FROM retail_transactions_dataset
GROUP BY Store_Type
ORDER BY SUM(Total_Cost) DESC;